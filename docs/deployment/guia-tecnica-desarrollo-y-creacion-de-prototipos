

# **Exposición de una API Local a Internet: Una Guía Técnica para el Desarrollo y la Creación de Prototipos**

## **Sección 1: El Desafío Fundamental de la Accesibilidad Local**

### **1.1 El Problema de la Red Doméstica**

Cuando se desarrolla una aplicación de software, como una API con FastAPI, esta se ejecuta en un entorno de "localhost" (por ejemplo, http://127.0.0.1:8000). Esta dirección es un bucle de retorno que solo es accesible desde la misma máquina en la que se está ejecutando el servidor. Para que un servicio frontend (una aplicación web o móvil) que no se encuentra en la misma máquina pueda comunicarse con esta API, esta debe ser accesible a través de la red pública de Internet.

Sin embargo, la mayoría de las redes domésticas y de oficina presentan dos obstáculos principales:

1. **Traducción de Direcciones de Red (NAT):** Tu router actúa como un guardián para tu red local. Asigna direcciones IP "privadas" (como 192.168.1.x) a todos tus dispositivos, pero utiliza una única dirección IP "pública" para comunicarse con el resto de Internet. El router no sabe a cuál de tus dispositivos enviar una solicitud entrante a menos que se le indique explícitamente.  
2. **Direcciones IP Dinámicas:** La mayoría de los proveedores de servicios de Internet (ISP) asignan direcciones IP públicas de forma dinámica. Esto significa que la IP pública de tu red puede cambiar periódicamente, lo que hace imposible tener una dirección fija y fiable para tu API.

### **1.2 El Objetivo**

El objetivo de este documento es presentar dos metodologías principales para superar estos obstáculos, permitiendo que una API que se ejecuta en una máquina local (en este caso, una con Pop\!\_OS) sea accesible de forma segura desde la red pública de Internet para fines de desarrollo, pruebas y demostración.

---

## **Sección 2: Solución Recomendada para Desarrollo \- Túneles Seguros**

La forma más moderna, segura y eficiente de exponer un servicio local es mediante el uso de un servicio de túnel. Este método crea una conexión saliente segura desde tu máquina a un servidor público, el cual redirige el tráfico externo a tu servicio local. Como la conexión se origina desde dentro de tu red, se evitan las complejas configuraciones de firewall y router.

### **2.1 Herramienta de Elección: ngrok**

ngrok es la herramienta estándar de la industria para esta tarea. Es fácil de instalar, segura y ofrece un plan gratuito robusto que es ideal para el desarrollo.

### **2.2 Guía de Implementación en Pop\!\_OS**

Paso 1: Asegurarse de que la API FastAPI esté en ejecución  
Antes de nada, tu API debe estar funcionando localmente. Abre una terminal en el directorio de tu proyecto y ejecuta el servidor Uvicorn:

Bash

uvicorn main:app \--host 127.0.0.1 \--port 8000

Tu API estará escuchando en el puerto 8000, accesible solo para ti.

Paso 2: Instalar el Agente ngrok  
En Pop\!\_OS (y otros sistemas basados en Debian/Ubuntu), ngrok se puede instalar de forma segura a través del gestor de paquetes apt. Abre una nueva terminal (mantén la de Uvicorn en ejecución) y sigue estos pasos:

Bash

\# Añadir la clave GPG de ngrok para asegurar las descargas  
curl \-s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | \\  
  sudo tee /etc/apt/trusted.gpg.d/ngrok.asc \>/dev/null

\# Añadir el repositorio de ngrok a las fuentes del sistema  
echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | \\  
  sudo tee /etc/apt/sources.list.d/ngrok.list

\# Actualizar la lista de paquetes e instalar ngrok  
sudo apt update && sudo apt install ngrok

Paso 3: Autenticar tu Cliente ngrok  
Para utilizar las funciones completas del plan gratuito, necesitas conectar tu cliente a tu cuenta.

1. Regístrate para obtener una cuenta gratuita en [ngrok.com](https://ngrok.com/signup).  
2. En tu panel de control de ngrok, navega a la sección "Your Authtoken".  
3. Copia el token y ejecútalo en tu terminal para guardar la configuración:  
   Bash  
   ngrok config add-authtoken TU\_TOKEN\_COPIADO\_AQUI

Paso 4: Exponer la API a Internet  
Con tu API FastAPI corriendo en el puerto 8000, ejecuta el siguiente comando en la terminal donde instalaste ngrok:

Bash

ngrok http 8000

La terminal mostrará una interfaz de estado con una URL pública en la sección "Forwarding":

Forwarding          https://\<cadena-aleatoria\>.ngrok-free.app \-\> http://localhost:8000

Esta URL https://\<cadena-aleatoria\>.ngrok-free.app es ahora la dirección pública y accesible de tu API. Cualquier solicitud enviada a esta URL será redirigida de forma segura a tu servicio FastAPI que se ejecuta en tu máquina local.

### **2.3 Ventajas del Método de Túnel**

* **Simplicidad:** No requiere configuración de DNS, reenvío de puertos ni reglas de firewall.  
* **Seguridad:** Crea un túnel HTTPS seguro por defecto, cifrando el tráfico.  
* **Portabilidad:** Funciona en cualquier red sin necesidad de acceso de administrador al router.  
* **Depuración:** ngrok proporciona una interfaz web local (generalmente en http://127.0.0.1:4040) que te permite inspeccionar todas las solicitudes y respuestas HTTP en tiempo real, lo cual es invaluable para la depuración.

---

## **Sección 3: Solución Alternativa \- Configuración de "Mini Servidor" Local (Avanzado)**

Este método es más complejo y se asemeja a la configuración de un servidor tradicional. Es un excelente ejercicio de aprendizaje sobre redes, pero no se recomienda para un entorno de desarrollo rápido debido a su complejidad y a las consideraciones de seguridad.

### **3.1 Componentes Requeridos**

Para que este método funcione, se necesitan tres componentes principales:

1. **DNS Dinámico (DDNS):** Un servicio que asigna un nombre de dominio a tu dirección IP pública dinámica.  
2. **Reenvío de Puertos (Port Forwarding):** Una configuración en tu router para dirigir el tráfico entrante a tu máquina.  
3. **Configuración del Firewall:** Reglas en tu sistema operativo para permitir las conexiones entrantes.

### **3.2 Pasos de Implementación**

Paso 1: Configurar un Servicio de DNS Dinámico (DDNS)  
Dado que tu IP pública puede cambiar, necesitas un servicio que actualice automáticamente los registros DNS.

1. Regístrate en un proveedor de DDNS (existen opciones gratuitas como([https://www.dynu.com/](https://www.dynu.com/)) o([https://freedns.afraid.org/](https://freedns.afraid.org/))).  
2. Elige un nombre de host (ej. mi-api-curricular.dynu.com).  
3. Instala y configura el cliente de actualización de DDNS en tu máquina Pop\!\_OS. Este cliente se ejecutará en segundo plano y notificará al servicio cada vez que tu IP pública cambie.

**Paso 2: Configurar el Reenvío de Puertos en tu Router**

1. Accede a la interfaz de administración de tu router (generalmente a través de una dirección como 192.168.1.1 en tu navegador).  
2. Busca la sección "Port Forwarding" o "Reenvío de Puertos".  
3. Crea una nueva regla:  
   * **Puerto Externo/Público:** 80 (para HTTP) o 443 (para HTTPS).  
   * **Puerto Interno/Local:** 8000 (el puerto donde corre tu API FastAPI).  
   * **Dirección IP Interna:** La dirección IP privada de tu máquina Pop\!\_OS (ej. 192.168.1.102).  
   * **Protocolo:** TCP.

Paso 3: Configurar el Firewall de Pop\!\_OS (UFW)  
Por defecto, el firewall de tu sistema operativo bloqueará las conexiones entrantes. Debes abrir explícitamente el puerto 8000\.

1. Abre una terminal y permite el tráfico en el puerto 8000:  
   Bash  
   sudo ufw allow 8000/tcp

2. Asegúrate de que el firewall esté activo y verifica el estado:  
   Bash  
   sudo ufw enable  
   sudo ufw status

   Deberías ver una regla que permite el tráfico en el puerto 8000\.

### **3.3 Desventajas de este Método**

* **Complejidad:** Requiere un conocimiento significativo de redes y la configuración de múltiples servicios.  
* **Riesgos de Seguridad:** Exponer un puerto directamente desde tu red doméstica abre un vector de ataque potencial. Eres el único responsable de asegurar el servicio.  
* **Dependencia del ISP:** Algunos proveedores de servicios de Internet bloquean los puertos entrantes comunes (como el 80), lo que puede impedir que esta configuración funcione.

---

## **Sección 4: Consideraciones Críticas de Seguridad y Conclusión**

### **4.1 Entorno de Desarrollo vs. Producción**

Es fundamental entender que exponer un servicio desde una máquina local, independientemente del método, **no es una solución para un entorno de producción**. Estos métodos son exclusivamente para desarrollo, pruebas, y demostraciones a pequeña escala. Una aplicación en producción requiere la fiabilidad, seguridad y escalabilidad que solo un proveedor de servicios en la nube puede ofrecer.

### **4.2 Seguridad de la API**

Incluso para el desarrollo, es una buena práctica no dejar tu API completamente abierta. Considera implementar una forma simple de autenticación en FastAPI, como una clave de API requerida en las cabeceras, para evitar el acceso no autorizado. Servicios como ngrok también ofrecen la posibilidad de añadir autenticación básica (usuario/contraseña) directamente en el túnel.

### **4.3 Recomendación Final**

Para el propósito de conectar un frontend a tu API local durante la fase de desarrollo, la **metodología de túneles con ngrok es la solución recomendada**. Ofrece un equilibrio óptimo entre facilidad de uso, seguridad y funcionalidad, permitiéndote tener una URL pública para tu API en cuestión de minutos sin ninguna configuración de red compleja.

Una vez que la aplicación esté madura y lista para ser utilizada por usuarios finales, se deberá proceder con el despliegue en una plataforma en la nube, como se describe en el roadmap de la API.